package bd.edu.seu.frontend.Login;import bd.edu.seu.Backend.Model.Donor;import bd.edu.seu.Backend.Model.Login_info;import bd.edu.seu.Backend.Model.Role;import bd.edu.seu.Backend.Service.DonorService;import bd.edu.seu.Backend.Service.LoginInfoService;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.formlayout.FormLayout;import com.vaadin.flow.component.html.H1;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.orderedlayout.VerticalLayout;import com.vaadin.flow.component.select.Select;import com.vaadin.flow.component.textfield.PasswordField;import com.vaadin.flow.component.textfield.TextField;import com.vaadin.flow.router.PageTitle;import com.vaadin.flow.router.Route;import org.springframework.beans.factory.annotation.Autowired;import java.util.List;@Route("donorRegistration")@PageTitle("Donor Registration")public class DonorRegistration extends VerticalLayout {//    @Autowired//    private Binder<Donor> donorInfo_binder;    @Autowired    private DonorService donorService;    @Autowired    private LoginInfoService loginInfoService;    public DonorRegistration() {//        donorInfo_binder = new Binder<>(Donor.class);        donorService = new DonorService();        FormLayout formLayout = new FormLayout();        formLayout.setSizeFull();        formLayout.setHeightFull();        formLayout.setWidthFull();        TextField name = new TextField("Name", "name");//        donorInfo_binder.forField(name)//                .asRequired()//                .withValidator(f -> f.length() >= 3, "Atleast 3 character need")//                .bind(Donor::getName, Donor::setName);        TextField address = new TextField("Address", "address");//        address.setMinLength(3);//        address.setRequired(true);//        address.setErrorMessage("Enter at least 3 character");//        donorInfo_binder.forField(address)//                .asRequired()//                .withValidator(f -> f.length() >= 3, "Atleast 3 character need")//                .bind(Donor::getAddress, Donor::setAddress);        TextField phone = new TextField("Phone", "phone");//        donorInfo_binder.forField(phone)//                .asRequired()//                .withValidator(v -> v.length() >= 8, "enter a valid phone")//                .bind(Donor::getPhone, Donor::setPhone);        TextField email = new TextField("Email", "email");//        donorInfo_binder.forField(email)//                .asRequired()//                .withValidator(t -> t.contains("@"), "enter a valid email")//                .bind(Donor::getEmail, Donor::setEmail);        TextField account = new TextField("Bkash/Rocket number", "account number");//        donorInfo_binder.forField(account)//                .asRequired()//                .withValidator(d -> d.length() >= 6, "minimum 2 character need")//                .bind(Donor::getAccount, Donor::setAddress);        Select<String> bloodGroup = new Select<>("A(+ve)","A(-ve)","B(+ve)","B(-ve)","O(+ve)","O(-ve)","AB(+ve)","AB(-ve)");        bloodGroup.setLabel("Blood Group");//        donorInfo_binder.forField(bloodGroup)//                .asRequired()//                .withValidator(n -> n.length() > 0, "enter a blood group")//                .bind(Donor::getBloodGroup, Donor::setBloodGroup);        PasswordField pass = new PasswordField("Password","Password");        formLayout.add(name,address,phone,email,account,bloodGroup,pass);        Button save = new Button("Save");        save.setSizeFull();        save.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        H1 title = new H1("Donor Registration Form");        title.setSizeFull();        setAlignItems(Alignment.CENTER);        save.addClickListener(buttonClickEvent -> {            String result="";            if(!name.isEmpty() && !account.isEmpty() && !address.isEmpty() && !bloodGroup.isEmpty() && !phone.isEmpty() && !email.isEmpty()){                result = saveDonor(name.getValue(), account.getValue(), address.getValue(), bloodGroup.getValue(), phone.getValue(), email.getValue());            }            if(!phone.isEmpty() && !pass.isEmpty()){                result = saveLoginInfo(phone.getValue(),pass.getValue());            }            if(result.equals("Success")){                Notification.show("Success..");                getUI().ifPresent(a->a.navigate("login"));            }else{                Notification.show("Empty Field Not allowed");            }        });        add(title,formLayout,save);    }    private String saveLoginInfo(String value, String value1) {        Login_info login_info = new Login_info();        login_info.setPhone(value);        login_info.setPass(value1);        login_info.setRole(Role.Donor_);        loginInfoService.SaveLoginInfo(login_info);        //no exception from backend .. so direct return        return "Success";    }    private String saveDonor(String value, String value1, String value2, String value3, String value4, String value5) {        Donor donor = new Donor();        donor.setName(value);        donor.setAccount(value1);        donor.setAddress(value2);        donor.setBloodGroup(value3);        donor.setPhone(value4);        donor.setEmail(value5);        donorService.SaveDonor(donor);        //there is no exception in backend.. that's why direct return...        return "Success";    }}