package bd.edu.seu.frontend.Login;import bd.edu.seu.Backend.Service.LoginService;import com.vaadin.flow.component.Key;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.dialog.Dialog;import com.vaadin.flow.component.formlayout.FormLayout;import com.vaadin.flow.component.html.*;import com.vaadin.flow.component.icon.VaadinIcon;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.textfield.PasswordField;import com.vaadin.flow.component.textfield.TextField;import com.vaadin.flow.router.PageTitle;import com.vaadin.flow.router.Route;import org.springframework.beans.factory.annotation.Autowired;import javax.servlet.http.HttpSession;@Route("login")@PageTitle("Login Page")public class LoginView extends Dialog {    @Autowired    private LoginService loginService;    public LoginView(HttpSession httpSession) {        super();        getElement().getStyle().set("background color","black");        TextField userName = new TextField("Phone Number: ","Phone");        PasswordField passwordField = new PasswordField("Password: ","password");        Button signin = new Button("SignIn", VaadinIcon.SIGN_IN_ALT.create());        signin.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        signin.addClickShortcut(Key.ENTER);        Button signup = new Button("SignUp", VaadinIcon.FILE_ADD.create());        signup.addThemeVariants(ButtonVariant.LUMO_ERROR);        FormLayout formLayout = new FormLayout();        Image image = new Image();        image.setSrc("https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTAuX4o1A6aVFrQUk2y5jFYrDyr39pUVSDXYQ&usqp=CAU");        image.setHeight("100px");        image.setWidth("200px");        H4 title = new H4("-JBMK BLOOD BANK SYSTEM-");        formLayout.add(title,image,userName,passwordField,signin,signup);        add(formLayout);        setWidth("310px");        setOpened(true);        setCloseOnEsc(false);        setCloseOnOutsideClick(false);        open();        //todo sign in button        signin.addClickListener(buttonClickEvent -> {            if(!userName.isEmpty() && !passwordField.isEmpty()) {                String userNameValue = userName.getValue();                String passWord = passwordField.getValue();                String token = loginService.getToken(userNameValue, passWord);                if (token.equals("Admin_")) {                    httpSession.setAttribute("username",userNameValue);                    httpSession.setAttribute("user", token);                    signin.getUI().ifPresent(ui -> ui.navigate("dash-bord-admin"));                } else if (token.equals("Donor_")) {                    httpSession.setAttribute("phone",userNameValue);                    httpSession.setAttribute("user", token);                    signin.getUI().ifPresent(ui -> ui.navigate("dash-bord-donor"));                } else if (token.equals("User_")) {                    httpSession.setAttribute("user", token);                    httpSession.setAttribute("username",userNameValue);                    signin.getUI().ifPresent(ui -> ui.navigate("userDashBoard"));                } else {                    httpSession.setAttribute("username",userNameValue);                    httpSession.setAttribute("user", token);                    Notification.show(token);                }            }else Notification.show("username or password isEmpty");        });        //todo signup button        signup.addClickListener(buttonClickEvent -> {            Dialog signup_dialog = new Dialog();            signup_dialog.open();            Button donor = new Button("Donor");            Button user = new Button("User");            donor.addThemeVariants(ButtonVariant.LUMO_LARGE);            user.addThemeVariants(ButtonVariant.LUMO_LARGE);            signup_dialog_listener(donor,user,signup_dialog);            signup_dialog.add(donor,user);        });    }    private void signup_dialog_listener(Button donor, Button user, Dialog signup_dialog) {        donor.addClickListener(buttonClickEvent -> {            signup_dialog.getUI().ifPresent(a->a.navigate("donorRegistration"));            signup_dialog.close();        });        user.addClickListener(buttonClickEvent -> {            signup_dialog.getUI().ifPresent(a->a.navigate("userRegistration"));            signup_dialog.close();        });    }}