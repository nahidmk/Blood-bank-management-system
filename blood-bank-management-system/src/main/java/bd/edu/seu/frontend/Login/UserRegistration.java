package bd.edu.seu.frontend.Login;import bd.edu.seu.Backend.Model.Login_info;import bd.edu.seu.Backend.Model.Role;import bd.edu.seu.Backend.Model.User;import bd.edu.seu.Backend.Service.LoginInfoService;import bd.edu.seu.Backend.Service.UserService;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.formlayout.FormLayout;import com.vaadin.flow.component.html.H1;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.orderedlayout.FlexComponent;import com.vaadin.flow.component.orderedlayout.VerticalLayout;import com.vaadin.flow.component.textfield.PasswordField;import com.vaadin.flow.component.textfield.TextField;import com.vaadin.flow.data.binder.Binder;import com.vaadin.flow.router.PageTitle;import com.vaadin.flow.router.Route;import org.springframework.beans.factory.annotation.Autowired;@Route("userRegistration")@PageTitle("User Registration")public class UserRegistration extends VerticalLayout {//        @Autowired//        private Binder<User> donorInfo_binder;    @Autowired    private UserService userService;    @Autowired    private LoginInfoService loginInfoService;    public UserRegistration() {//        donorInfo_binder = new Binder<>(User.class);        FormLayout formLayout = new FormLayout();        formLayout.setSizeFull();        formLayout.setHeightFull();        formLayout.setWidthFull();        TextField name = new TextField("Name", "name");//        donorInfo_binder.forField(name)//                .asRequired()//                .withValidator(f -> f.length() >= 3, "Atleast 3 character need")//                .bind(User::getName, User::setName);        TextField address = new TextField("Address", "address");//        address.setMinLength(3);//        address.setRequired(true);//        address.setErrorMessage("Enter at least 3 character");//        donorInfo_binder.forField(address)//                .asRequired()//                .withValidator(f -> f.length() >= 3, "Atleast 3 character need")//                .bind(User::getAddress, User::setAddress);        TextField phone = new TextField("Phone", "phone");//        donorInfo_binder.forField(phone)//                .asRequired()//                .withValidator(v -> v.length() >= 8, "enter a valid phone")//                .bind(User::getPhone, User::setPhone);        TextField email = new TextField("Email", "email");//        donorInfo_binder.forField(email)//                .asRequired()//                .withValidator(t -> t.contains("@"), "enter a valid email")//                .bind(User::getEmail, User::setEmail);        PasswordField pass = new PasswordField("Password","Password");        pass.setSizeFull();        formLayout.add(name, address, phone, email);        Button save = new Button("Save");        save.setSizeFull();        save.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        H1 title = new H1("User Registration Form");        title.setSizeFull();        setAlignItems(FlexComponent.Alignment.CENTER);        save.addClickListener(buttonClickEvent -> {            String result="";            if(!name.isEmpty() && !phone.isEmpty() && !address.isEmpty() && !email.isEmpty()){                saveUserInfo(name.getValue(),phone.getValue(),address.getValue(),email.getValue());            }            if(!phone.isEmpty() && !pass.isEmpty()){                result = saveLoginInfo(phone.getValue(),pass.getValue());            }            if(result.equals("Success")){                Notification.show(result);                getUI().ifPresent(a->a.navigate("login"));            }        });        add(title, formLayout,pass, save);    }    private String saveUserInfo(String value, String value1, String value2, String value3) {        User user = new User();        user.setName(value);        user.setPhone(value1);        user.setAddress(value2);        user.setEmail(value3);        user.setId(userService.getMaxId()+1);        userService.SaveUser(user);        //no exception        return "Success";    }    private String saveLoginInfo(String value, String value1) {        Login_info login_info = new Login_info();        login_info.setPhone(value);        login_info.setPass(value1);        login_info.setRole(Role.User_);        loginInfoService.SaveLoginInfo(login_info);        //no exception from backend .. so direct return        return "Success";    }}